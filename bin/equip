#!/usr/bin/env bash

### Yes we hardcode variables
GITHUB="https://raw.githubusercontent.com/Polyergic/Shellacc/master/"
BOOTSTRAP="$HOME/tmp/shellac-equip-bootstrap/"
STATUSPREFIX=" --------------- "
ERRORPREFIX=" =============== "
set -eE
exec 3>&1 ## make stdout available in `captured` functions

function main {
	echo "=============================================================================="
	echo "=========="
	echo "==========     Shell Accoutrements: Attempting to equip this shell..."
	echo "=========="
	### TODO: check for existance of /usr/bin/env, bash, curl, etc...

	### Get into bootstrap dir
	echo "$STATUSPREFIX bootstrapping from $BOOTSTRAP"
	mkdir -p "$BOOTSTRAP"
	pushd "$BOOTSTRAP"  ## todo: hide output & test for failure

	### Check for a compatible platform
	PLATFORM=`remote bin/platform`
	case "$PLATFORM" in
		"MacOS")
			## TODO: only install macports if not already installed (or needs reinstall for OS update)
			## TODO: get latest version by parsing http://distfiles.macports.org/MacPorts/
			PORTVERSION="2.3.4"
			## get OS version
			OSVERSION=`remote bin/mac/version 2`
			## get OS name
			OSNAME=`remote bin/mac/flavor`
			## construct URL
			PORTPKG="MacPorts-$PORTVERSION-$OSVERSION-$OSNAME.pkg"
			PKGURL="http://distfiles.macports.org/MacPorts/$PORTPKG"
			## fetch installer package
			echo "$STATUSPREFIX retrieving MacPorts installer: $PORTPKG from $PKGURL"
			curl "$PKGURL" --output "$PORTPKG" -#
			## TODO: check signature in "$PKGURL.asc"
			echo "$STATUSPREFIX running MacPorts installer (may require Administrator password)"
			sudo installer -verbose -pkg "$PORTPKG" -target /
			## TODO: check for installation errors
			PATH="/opt/local/bin:$PATH"
			echo "$STATUSPREFIX running MacPorts selfupdate routine (may require Administrator password)"
			sudo port -v selfupdate
			## TODO: Install default list of ports
			failout "UNIMPLEMENTED: equip shell under MacOS"
			;;
		*)
			failout "FAILED!:  Unsupported platform $PLATFORM"
			;;
	esac

	### Cleanup
	popd ## todo: hide output & test for failure
	rm -rf "$BOOTSTRAP"
}

function remote {
	RELPATH="$1"
	## TODO: if present, check for out of date
	if [ ! -x "$RELPATH" ]; then
		URL="$GITHUB""$RELPATH"
		echo "$STATUSPREFIX retrieving $RELPATH from $URL" >&3
		curl "$URL" --output "$RELPATH" --create-dirs -# -f
		if [ ! -f "$RELPATH" ]; then
			failout "FAILURE: unable to retrieve $RELPATH from $URL"
		fi
		chmod +x "$RELPATH"
	fi
	shift
	$RELPATH "$@"
}

function failout {
	echo "$ERRORPREFIX $1" >&2
	exit 99
}

main
